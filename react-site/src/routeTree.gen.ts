/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TechniqueListImport } from './routes/techniqueList'
import { Route as IndexImport } from './routes/index'
import { Route as BeltsIndexImport } from './routes/belts/index'
import { Route as BeltsBeltIdImport } from './routes/belts/$beltId'

// Create/Update Routes

const TechniqueListRoute = TechniqueListImport.update({
  id: '/techniqueList',
  path: '/techniqueList',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const BeltsIndexRoute = BeltsIndexImport.update({
  id: '/belts/',
  path: '/belts/',
  getParentRoute: () => rootRoute,
} as any)

const BeltsBeltIdRoute = BeltsBeltIdImport.update({
  id: '/belts/$beltId',
  path: '/belts/$beltId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/techniqueList': {
      id: '/techniqueList'
      path: '/techniqueList'
      fullPath: '/techniqueList'
      preLoaderRoute: typeof TechniqueListImport
      parentRoute: typeof rootRoute
    }
    '/belts/$beltId': {
      id: '/belts/$beltId'
      path: '/belts/$beltId'
      fullPath: '/belts/$beltId'
      preLoaderRoute: typeof BeltsBeltIdImport
      parentRoute: typeof rootRoute
    }
    '/belts/': {
      id: '/belts/'
      path: '/belts'
      fullPath: '/belts'
      preLoaderRoute: typeof BeltsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/techniqueList': typeof TechniqueListRoute
  '/belts/$beltId': typeof BeltsBeltIdRoute
  '/belts': typeof BeltsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/techniqueList': typeof TechniqueListRoute
  '/belts/$beltId': typeof BeltsBeltIdRoute
  '/belts': typeof BeltsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/techniqueList': typeof TechniqueListRoute
  '/belts/$beltId': typeof BeltsBeltIdRoute
  '/belts/': typeof BeltsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/techniqueList' | '/belts/$beltId' | '/belts'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/techniqueList' | '/belts/$beltId' | '/belts'
  id: '__root__' | '/' | '/techniqueList' | '/belts/$beltId' | '/belts/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TechniqueListRoute: typeof TechniqueListRoute
  BeltsBeltIdRoute: typeof BeltsBeltIdRoute
  BeltsIndexRoute: typeof BeltsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TechniqueListRoute: TechniqueListRoute,
  BeltsBeltIdRoute: BeltsBeltIdRoute,
  BeltsIndexRoute: BeltsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/techniqueList",
        "/belts/$beltId",
        "/belts/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/techniqueList": {
      "filePath": "techniqueList.tsx"
    },
    "/belts/$beltId": {
      "filePath": "belts/$beltId.tsx"
    },
    "/belts/": {
      "filePath": "belts/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
